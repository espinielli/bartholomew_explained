% draft is convinient to show over/under boxes,
% BUT it does NOT inlude graphics nor create links
%\documentclass[a4paper,draft,pdftex]{report}
\documentclass[a4paper,pdftex]{report}

%%% NOWEB style
\usepackage{noweb}
% the followin nowebstyle (1) options sholud be concatenated
% and separated by only a comma (','):
% shift: Shift text to the left so that long code lines will not extend off
%        the right-hand side of the page.
% externalindex: Use an index generated with noindex(1).
% webnumbering: Number chunks consecutively, in WEB style, instead of
%        using sub-page numbers.
% longxref: small paragraphs after each chunk, as in Knuth, for chunk
%        cross-reference.
% subscriptidents: identifiers in code, including quoted code will be
%        subscripted with the chunk number of its definition.
% longchunks: When expanding \nowebchunks, show page numbers of definitions
%        and uses of each chunk.
% smallcode: Set code in LaTeX \small font instead of \normalsize.
\noweboptions{externalindex,webnumbering,longxref,longchunks,smallcode}


% for index production
\usepackage{makeidx}
\usepackage{showidx}
\makeindex

%%\usepackage{microtype}
\usepackage{lmodern}
%%\usepackage[latin1]{inputenc}
%%\usepackage[T1]{fontenc}

%% macros
\def\[{\ifhmode\ \fi$[\mkern-2mu[$}
\def\]{$]\mkern-2mu]$}
\def\nw{\textsc{Noweb}}

\def\thankstext{I want to thank my wife, Gilda, for the patience
  of having looked after all kids and things while I was
  \textit{playing} with this project. I also want to thank
  Prof.~Reingold for his his prompt reply to all my questions.
  Finally my gratitude goes to my parents, Alida and Mario, for the
  sacrifice they endevoured in order to allow me get inspired by
  Science.}

\title{\textsc{Bartholomew} -- Jason Davies' Bartholomew's map
  projection Explained}
\author{Enrico Spinielli\thanks{\thankstext}}

\usepackage[pdftex]{graphicx}

% hyperref must be the last package to include
\usepackage{hyperref}

\hypersetup{%
  pageanchor=true,
  plainpages=false,
  pdfpagelabels,
  pagebackref,
  pdfdisplaydoctitle=true,
  urlcolor=blue,
  linktocpage,
  a4paper=true,
  colorlinks=true,
  breaklinks=true,
  pdftex,
  pdftitle={Wonderful Maps - Literate d3js Maps},
  pdfauthor={Enrico Spinielli},
  pdfsubject={d3.js maps projections},
  pdfkeywords={d3.js, projections, javascript, literate programming},
  pdfcreator = {LaTeX with hyperref package},
  pdfproducer = {pdfLaTeX}}


\newcommand*{\manualmark}{%
  \if@chapter\let\chaptermark\@gobble\fi
  \let\sectionmark\@gobble
  \let\subsectionmark\@gobble
  \let\subsubsectionmark\@gobble
  \let\paragraphmark\@gobble
  \let\subparagraphmark\@gobble
  \let\@mkboth\@gobbletwo
  \@automarkfalse
}


%% Define a new 'leo' style for the package that will use a smaller font.
\makeatletter
\def\url@leostyle{%
  \@ifundefined{selectfont}{\def\UrlFont{\sf}}{\def\UrlFont{\small\ttfamily}}}
\makeatother
%% Now actually use the newly defined style.
\urlstyle{leostyle}


\begin{document}
\maketitle
\cleardoublepage                %%% start again on odd page

%
% Table of Contents:
\pagenumbering{roman}           %%% Roman page numbers for ToC
\setcounter{page}{1}
\pdfbookmark[1]{Contents}{toc}  %%% additional bookmark for ToC
\thispagestyle{plain}           %%% uses the above defined fancy
                                %%% page-header
\tableofcontents
\markboth{Table of Contents}{Table of Contents} %%% for the page
                                                %%% header
\cleardoublepage                %%% start again on odd page
\pagenumbering{arabic}          %%% from now on Arabic page numbers
\setcounter{page}{1}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Why}
\label{ch:maps}

This is my attempt to undertsand how
\href{http://www.jasondavies.com}{Jason Davies} builds his marvelous
map projections.
I took
\href{http://www.jasondavies.com/maps/bartholomew/}{Bartholomew's Map
  Projection} as a reference and will comment its code here.

I took the liberty to slightly change some snippets of code that were
too dense for my poor brain.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{The code}
\label{ch:code}

\section{HTML}
\label{sec:html}
The main HTMl file for the map projections is
<<*>>=
<<bartholomew exaplained>>

@ It is organised as follows:
<<bartholomew exaplained>>=
<<doctype declaration>>
  <html>
<<head info>>
<<body info>>
  </html>

@ We use HTML5, so
<<doctype declaration>>=
<!DOCTYPE html>

@ The head information comprises the meta, title and style
<<head info>>=
<<meta>>
<<title>>
<<style>>

@
For this example meta is quite simple and it is all about the charset used:
<<meta>>=
<meta charset="utf-8">

@
The title
<<title>>=
<title><<title text>></title>

<<title text>>=
Bartholomew’s Regional Projection

@ and the specific style for this map
<<style>>=
<meta charset="utf-8">
<style>
@import url(./maps.css);

.outline {
  fill: #efbb89;
  stroke-width: 1px;
  stroke: #000;
}

.land {
  fill: #c97344;
  stroke-width: .5px;
  stroke: #000;
}

.boundary, .graticule {
  fill: none;
  stroke-width: .5px;
  stroke: #000;
}

.graticule {
  stroke-opacity: .3;
}

.parallel {
  fill: none;
  stroke: #000;
  stroke-width: .5px;
  stroke-dasharray: 2,2;
}
</style>
@  are quite straightforward to understand.

The body of the page is minimalistic:
<<body info>>=
<h1><<title text>></h1>
<<div for map>>
<<description>>
<<jscode>>

@
First we need a placeholder for where the map will be displayed
<<div for map>>=
<div id="map"></div>
@ and this is between the tile and the description:
<<description>>=
<div class="wrapper">
  <p>The <a href="http://bl.ocks.org/3734317">equidistant conic projection</a>
  is used for latitudes above the
  <a href="http://en.wikipedia.org/wiki/Tropic_of_Cancer">Tropic of Cancer</a>
  (22.5°N), with an
  <a href="http://www.jasondavies.com/maps/bonne/">interrupted Bonne</a>
  elsewhere.
  <p>Created using <a href="http://d3js.org/">D3</a>’s
  <a href="https://github.com/d3/d3-plugins/tree/master/geo/projection">
  geo.projection</a> and
  <a href="https://github.com/d3/d3-plugins/tree/master/geo/polyhedron">
  geo.polyhedron</a> plugins.

  <h2>See Also</h2>
  <ul>
    <li><a href="http://www.davidrumsey.com/luna/servlet/detail/RUMSEY~8~1~225231~5505984">Bartholomew’s original</a>.
    <li><a href="http://www.jasondavies.com/maps/bonne/">Interrupted Bonne</a>.
  </ul>
  <p class="cite" style="text-align: left">
  Data:
  <a href="http://www.naturalearthdata.com/downloads/50m-physical-vectors/">
  Natural Earth, 1:50m Physical Vectors</a>.
</div>
@ 
\section{Javascript}
\label{sec:js}
The d3 code is where the fun starts, it is about using d3.js and
Co. but also some specific javascript for this map.
<<jscode>>=
<<libraries>>
<<bartholomew code>>

@ The libraries are the ususal ones
<<libraries>>=
<script src="./d3.min.js?3.0.2"></script>
<script src="./d3.geo.projection.min.js"></script>
<script src="./d3.geo.polyhedron.js"></script>
<script src="./maps.js"></script>
<script src="./topojson.min.js"></script>
@ at this stage I am not sure whether \[maps.js\] is needed.

<<bartholomew code>>=
<script>
<<vars definitions>>
<<projection declaration>>
<<graticule declaration>>

var svg = d3.select("#map").append("svg")
    .attr("width", width)
    .attr("height", height);

<<clipPath definitions>>

svg.append("use")
    .attr("class", "outline")
    .attr("xlink:href", "#sphere");

var g = svg.append("g").attr("clip-path", "url(#clip)");

g.append("path")
    .datum(graticule)
    .attr("class", "graticule")
    .attr("d", path);

g.selectAll("path.parallel")
    .data([
      d3.range(-180, 181, 1).map(function(x) { return [x - x0, 22.5]; }),
      d3.range(-180, 181, 1).map(function(x) { return [x - x0, 67.5]; }),
      d3.range(-180, 181, 1).map(function(x) { return [x - x0, -22.5]; }),
      d3.range(-180, 181, 1).map(function(x) { return [x - x0, -67.5]; }),
      [[-180, 0], [-60, 0], [60, 0], [180, 0]]
    ])
  .enter().append("path")
    .datum(function(d) { return {type: "LineString", coordinates: d}; })
    .attr("class", "parallel")
    .attr("d", path);

d3.json("./world-50m.json", function(error, world) {
  g.insert("path", ".graticule")
      .datum(topojson.object(world, world.objects.land))
      .attr("class", "land")
      .attr("d", path);
  g.insert("path", ".graticule")
      .datum(topojson.mesh(world, world.objects.countries, function(a, b) { return a !== b; }))
      .attr("class", "boundary")
      .attr("d", path);
});

function bartholomew(φ0, φ1) {
  // First, define the shared vertices.
  var vertices = [
    [-180,  80],
    [   0,  80],
    [ 180,  80],

    [-180,  φ0],
    [ -40,  φ0],
    [  40,  φ0],
    [  70,  φ0],
    [ 180,  φ0],

    [ -80, -90],
    [   0, -90],
    [ 110, -90],

    [  40,   0],
    [  70,   0],
  ];

  // Insert 80° parallel for outline.
  var face0 = [0],
      i = vertices.length;
  d3.range(-179, 0).forEach(function(x) {
    vertices.push([x, 80]);
    face0.push(i++);
  })
  face0.push(1);
  d3.range(1, 180).forEach(function(x) {
    vertices.push([x, 80]);
    face0.push(i++);
  });
  face0.push(2);

  var faces = [
    face0.concat([7, 6, 5, 4, 3]),
    [3, 4, 8],
    [4, 5, 9],
    [5, 6, 12, 11],
    [6, 7, 10, 11, 12]
  ].map(function(face, i) {
    face = face.map(function(i) { return vertices[i]; });
    return {face: face, project: (i
        ? d3.geo.bonne().parallel(bonneParallel(φ0, φ1)).rotate([-face[2][0], 0])
        : d3.geo.conicEquidistant().parallels([φ0, φ1])
    ).scale(1).translate([0, 0])};
  });

  faces[0].children = faces.slice(1);

  function face(λ, φ) {
    λ *= degrees;
    φ *= degrees;
    return faces[
      φ > φ0 ? 0
      : λ < -40 ? 1
      : λ < 40 ? 2
      : λ < 70 ? φ >= 0 ? 3 : 4
      : 4
    ];
  }

  return d3.geo.polyhedron(faces[0], face, 0).precision(.1);
}

// Solve cot(φ) + φ = G, where G is taken from the equidistant conic formula.
function bonneParallel(φ0, φ1) {
  if (φ0 === φ1) return φ0;
  φ0 *= radians, φ1 *= radians;
  var ε = 1e-6,
      cosφ0 = Math.cos(φ0),
      G = cosφ0 * (φ1 - φ0) / (cosφ0 - Math.cos(φ1)) + φ0,
      δ;
  do {
    φ0 += δ = (δ = Math.tan(φ0)) + (φ0 - G) * δ * δ;
  } while (Math.abs(δ) > ε);
  return φ0 * degrees;
}

</script>

<<vars definitions>>=
var π = Math.PI,
    degrees = 180 / π,
    radians = π / 180,
    width = 1300,
    height = 825,
    ε = 1e-6,
    φ0 = 22.5, // Tropic of Cancer
    φ1 = 67.5; // Arctic Circle

<<projection declaration>>=
var path = d3.geo.path().projection(bartholomew(φ0, φ1)
      .rotate([-20, 0])
      .scale(200)
      .translate([width / 2, height / 2])
      .center([0, φ0 + 5]));

<<graticule declaration>>=
var graticule = d3.geo.graticule()
      .majorExtent([[-180, -90], [180, 80 + ε]]);

<<clipPath definitions>>=
var x0 = path.projection().rotate()[0];

var defs = svg.append("defs");
defs.append("path")
    .datum({type: "Sphere"})
    .attr("id", "sphere")
    .attr("d", path);

var clipPath = defs.append("clipPath").attr("id", "clip");
clipPath.append("use").attr("xlink:href", "#sphere");

// Extend clip region to make features > 80°N visible.
clipPath.append("path")
    .datum({type: "Polygon", coordinates: [
      [[-180 - x0, 90], [-60 - x0, 90], [60 - x0, 90], [180 - x0, 90]].concat(
        d3.range(180, -180, -1).map(function(x) { return [x - x0, 79]; }))
    ]})
    .attr("d", path);

@
\end{document}
